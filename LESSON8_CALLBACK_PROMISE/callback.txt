Hàm callback trong JavaScript là một hàm được truyền vào như một đối số cho một hàm khác. Hàm callback được gọi lại (hoặc thực thi) bên trong hàm gọi nó, cho phép xử lý các tác vụ không đồng bộ hoặc định nghĩa hành vi linh hoạt.

Đặc điểm chính của hàm callback:

1. Là hàm: Hàm callback là một đối tượng hàm trong JavaScript. Điều này có nghĩa rằng nó có thể được định nghĩa bằng cách sử dụng khai báo hàm (`function`) hoặc biểu thức hàm (`() => {}`).

2. Được truyền vào như đối số: Hàm callback được truyền vào như một đối số cho một hàm khác. Hàm này có thể được truyền dưới dạng tham số cho hàm gốc hoặc một phương thức của đối tượng.

3. Được gọi lại bên trong hàm gọi: Hàm callback được gọi lại (hoặc thực thi) bên trong hàm gọi nó. Điều này cho phép hàm gọi truyền dữ liệu hoặc kết quả cho hàm callback để xử lý tiếp.

Hàm callback rất hữu ích trong các tình huống như xử lý sự kiện, tác vụ không đồng bộ, hoặc truy vấn dữ liệu từ cơ sở dữ liệu. Chúng cho phép chúng ta xác định hành vi linh hoạt và tiếp tục thực hiện các tác vụ khác trong khi đợi kết quả từ hàm callback được gọi.

Việc sử dụng hàm callback giúp mã trở nên linh hoạt hơn, dễ mở rộng và dễ tái sử dụng. Nó cho phép chúng ta truyền logic thực thi tùy chỉnh vào các hàm khác, mở ra nhiều cơ hội để tương tác với mã JavaScript trong môi trường bất đồng bộ.

Cú pháp để định nghĩa và sử dụng hàm callback trong JavaScript như sau:

1. Định nghĩa hàm callback:

   a) Sử dụng khai báo hàm (function declaration):
   ```javascript
   function callbackFunction(parameter1, parameter2, ...) {
     // Logic xử lý trong hàm callback
   }
   ```

   b) Sử dụng biểu thức hàm (function expression):
   ```javascript
   const callbackFunction = function(parameter1, parameter2, ...) {
     // Logic xử lý trong hàm callback
   };
   ```

   c) Sử dụng hàm mũi tên (arrow function):
   ```javascript
   const callbackFunction = (parameter1, parameter2, ...) => {
     // Logic xử lý trong hàm callback
   };
   ```

2. Sử dụng hàm callback:

   a) Truyền hàm callback làm đối số cho một hàm khác:
   ```javascript
   function higherOrderFunction(callback) {
     // Logic trong hàm gọi
     callback(argument1, argument2, ...);
   }
   ```

   b) Gọi hàm callback bên trong hàm gọi:
   ```javascript
   function higherOrderFunction(callback) {
     // Logic trong hàm gọi
     callback(argument1, argument2, ...);
   }
   ```

Ví dụ về việc sử dụng hàm callback:

```javascript
function calculate(a, b, callback) {
  const result = callback(a, b);
  console.log("Kết quả:", result);
}

function add(x, y) {
  return x + y;
}

function multiply(x, y) {
  return x * y;
}

calculate(5, 3, add);       // Kết quả: 8
calculate(5, 3, multiply);  // Kết quả: 15
```

Trong ví dụ trên, chúng ta có một hàm `calculate` nhận ba đối số: hai số (`a` và `b`) và một hàm callback (`callback`). Trong hàm `calculate`, chúng ta gọi hàm callback với hai số `a` và `b` và lưu kết quả vào biến `result`. Cuối cùng, chúng ta in ra kết quả.

Chúng ta định nghĩa hai hàm callback `add` và `multiply` để thực hiện phép cộng và nhân hai số. Trong ví dụ này, chúng ta truyền hàm `add` và `multiply` làm callback cho hàm `calculate` để thực hiện phép cộng và nhân hai số đầu vào.